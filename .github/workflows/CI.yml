name: LMS containerization CI
on:
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Docker Login
        id: login
        uses: docker/login-action@v3.4.0
        with:
          username:  ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
       
      - name: check login failure
        id: check_login
        if: ${{always()}}
        run: |
          if [[ "${{steps.login.conclusion}}" == 'falure' ]]; then
            echo "Error_message=Docker login failure" >> $$GITHUB_ENV
            echo "Failed_job=Build" >> $$GITHUB_ENV
          fi
      - name : Genrate docker image tags
        run: echo "IMAGE_TAG=$GITHUB_SHA--$(date +%Y%m%d%H%M%S)--$GITHUB_RUN_ATTEMPT" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v4

      - name: build frontend
        id: build_frontend
        run : |
          docker build ./frontend -t ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest -t ${{ secrets.DOCKERHUB_USERNAME }}/frontend:$IMAGE_TAG 2>&1 | tee output.txt
          step_exit_code=${PIPESTATUS[0]}

          if [ $step_exit_code == 0 ]; then
              echo "Status=success" >> $GITHUB_ENV
              echo -e "Work-flow started by ${{github.actor}} has ✅ Passed \n ***** Details ***** \nJob: Build" > result.txt
              echo "Work-flow started by ${{github.actor}} has ✅ Passed " > result.txt
              echo "Result_text=$(cat result.txt)" >> $GITHUB_ENV
          else
            echo "Status=failure" >> $GITHUB_ENV
            echo -e "Work-flow started by ${{github.actor}} has ❌ failed\n ***** Details ***** \nJob: Build" > result.txt
            cat output.txt > result.txt
            echo "Result_text<<EOF" >> $GITHUB_ENV
            tail -n 20 result.txt >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
            exit ${step_exit_code}
          fi
      
      - name: build backend
        run : docker build ./backend -t ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest -t ${{ secrets.DOCKERHUB_USERNAME }}/backend:$IMAGE_TAG  
      - name: Push to Docker
        run: |
          docker push --all-tags ${{ secrets.DOCKERHUB_USERNAME }}/frontend
          docker push --all-tags ${{ secrets.DOCKERHUB_USERNAME }}/backend

      
      - name: Send Slack notification
        if: ${{always()}}
        uses: act10ns/slack@v2
        with:
          status: ${{ env.Status }}
          message: Error *** {{env.Result_text}}
      
  Run-deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Execute remote SSH commands using password
        id: deploy_to_linux
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST}}
          username: ${{ secrets.USERNAME}}
          password: ${{ secrets.PASSWORD}}
          script: |
            cd /home/eshiet/lms
            ./deploy.sh

      - name: check deploy failure
        if: ${{always()}}
        run: |
          if [[ "${{ steps.deploy_to_linux.conclusion }}" == "failure" ]]; then
            echo "Error_message=Can not login to remote machine ${{ secrets.HOST }}" >> $GITHUB_ENV
            echo "Failed_job=Run-deploy" >> $GITHUB_ENV
          fi
      - name: Run on failure
        if: ${{failure()}}
        run: |
          echo "The workflow started by ${{github.actor}} has failed see details >>> Job: $Failed_job, Error Message: $Error_message"
